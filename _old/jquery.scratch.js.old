(function( $ ){
	var methods = {
		init : function( options ) {
			return this.each(function(){
				var $this = $(this),
					data = $this.data('scratch');
					
				if ( !data ) {
					// get references, create container and canvas objects
					var $parent = $this.parent(),
						width = $this.width(),
						height = $this.height(),
						pos = $this.offset(),
						$container = $("<span/>"),
						$canvas = $("<canvas/>"),
						canvas = $canvas.get(0),
						ctx = canvas.getContext("2d");
					// insert, swap and move elements
					$container.css('position','relative');
					$this.after( $container );
					$container.append($this);
					//$this.css('position', 'absolute');
					$container.append($canvas);
					$canvas.css('position', 'absolute');
					$canvas.css('zIndex', '100');
					// resize the canvas
					canvas.width = width;
					canvas.height = height;
					// fill canvas with black
					ctx.globalCompositeOperation = "source-over";
					ctx.fillStyle = 'rgba(0,0,0,255)';
					ctx.fillRect( 0, 0, width, height );
					// prepare context for drawing operations
					ctx.globalCompositeOperation = "source-out";
					ctx.strokeStyle = 'rgba(255,255,255,0)';
					ctx.lineWidth = 40;
					ctx.lineCap = "round";
					// bind events
					$canvas.bind('mousedown.scratch', methods.mouseDown);
					$canvas.bind('touchstart.scratch', methods.touchStart);
					$canvas.bind('touchmove.scratch', methods.touchMove);
					$canvas.bind('touchend.scratch', methods.touchEnd);
					// store values
					$canvas.data('scratch', {
						posX:pos.left,
						posY:pos.top,
						touchDown: false,
						touchID:-999,
						touchX: 0,
						touchY: 0,
						ptouchX: 0,
						ptouchY: 0,
						canvas: $canvas,
						ctx: ctx,
						w:width,
						h:height
					});
				}
			});
		},
		touchStart: function( event ) {
			var $this = $(this),
				data = $this.data('scratch');
				
			if ( !data.touchDown ) {
				var t = event.originalEvent.changedTouches[0];
				data.touchDown = true;
				data.touchID = t.identifier;
				data.touchX = t.pageX - data.posX;
				data.touchY = t.pageY - data.posY;
				event.preventDefault();
			}
		},
		touchMove: function( event ) {
			var $this = $(this),
				data = $this.data('scratch');
				
			if ( data.touchDown ) {
				var ta = event.originalEvent.changedTouches,
					n = ta.length;
				while( n-- ) 
					if ( ta[n].identifier == data.touchID ) {
						data.ctx.beginPath();
						data.ctx.moveTo( data.touchX, data.touchY );
						data.touchX = ta[n].pageX;
						data.touchY = ta[n].pageY;
						data.ctx.lineTo( data.touchX, data.touchY );
						data.ctx.stroke();
						event.preventDefault();
						break;
					}
			}
		},
		touchEnd: function( event ) {
			var $this = $(this),
				data = $this.data('scratch');
				
			if ( data.touchDown ) {
				var ta = event.originalEvent.changedTouches,
					n = ta.length;
				while( n-- )
					if ( ta[n].identifier == data.touchID ) {
						data.touchDown = false;
						event.preventDefault();
						break;
					}
			}
		},
		
		
		mouseDown: function( event ) {
			var $this = $(this),
				data = $this.data('scratch');
				
			data.touchDown = true;
			data.touchX = event.pageX - data.posX;
			data.touchY = event.pageY - data.posY;
			$this.bind('mousemove.scratch', methods.mouseMove);
			$this.bind('mouseup.scratch', methods.mouseUp);
			event.preventDefault();
		},
		
		mouseMove: function( event ) {
			var $this = $(this),
				data = $this.data('scratch');
				
			data.ctx.beginPath();
			data.ctx.moveTo( data.touchX, data.touchY );
			data.touchX = event.pageX - data.posX;
			data.touchY = event.pageY - data.posY;
			data.ctx.lineTo( data.touchX, data.touchY );
			data.ctx.stroke();
			event.preventDefault();
		},
		
		mouseUp: function( event ) {
			var $this = $(this),
				data = $this.data('scratch');
				
			data.touchDown = false;
			$this.unbind('mousemove.scratch');
			$this.unbind('mouseup.scratch');
			event.preventDefault();
		},
		
		/*
		destroy : function( ) {
			return this.each(function(){
				var $this = $(this),
					data = $this.data('scratch');
				data.scratch.remove();
				$this.removeData('scratch');
			})
		},
		*/
		update : function( content ) { }
	};

	$.fn.scratch = function( method ) {
		if ( methods[method] ) {
			return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
		} else if ( typeof method === 'object' || ! method ) {
			return methods.init.apply( this, arguments );
		} else {
			$.error( 'Method ' +  method + ' does not exist on jQuery.scratch' );
		}
	};
})( jQuery );


	/*
		var ctx,
		 	canvas,
			cw, ch,
			touchX, touchY,
			ptouchX, ptouchY,
			touchID,
			touchDown = false;
	
		function init() {
			canvas = document.getElementById("canvas");
			ctx = canvas.getContext("2d");
			
			// handle document size change
			window.onorientationchange = resetCanvas;  
			window.onresize = resetCanvas;
			resetCanvas();
			
			// set-up touch interaction
			document.addEventListener( 'touchstart', onTouchStart, false );
			document.addEventListener( 'touchmove', onTouchMove, false );
			document.addEventListener( 'touchend', onTouchEnd, false );

			// set-up mouse interaction
			document.addEventListener( 'mousedown', onMouseDown, false );
			
		}
		
		function resetCanvas (e) {
			// update size values
		  	canvas.width = cw = window.innerWidth; 
			canvas.height = ch = window.innerHeight;
			// clear
			ctx.globalCompositeOperation = "source-over";
			ctx.fillStyle = 'rgba(0,0,0,255)';
			ctx.fillRect( 0, 0, cw, ch );
			// prepare for drawing
			ctx.globalCompositeOperation = "source-out";
			ctx.strokeStyle = 'rgba(255,255,255,0)';
			ctx.lineWidth = 40;
			ctx.lineCap = "round";
		}
		
		function draw() {
			if ( touchDown )
			{
				ctx.beginPath();
				ctx.moveTo( ptouchX, ptouchY );
				ctx.lineTo( touchX, touchY );
				ctx.closePath;
				ctx.stroke();
				ptouchX = touchX;
				ptouchY = touchY;
			}
		}
		
	
		function onTouchStart(event) 
		{
			if ( !touchDown )
			{
				var t = event.changedTouches[0];
				touchDown = true;
				touchID = t.identifier;
				ptouchX = touchX = t.pageX;
				ptouchY = touchY = t.pageY;
			}
			event.preventDefault(); 
		}

		function onTouchMove(event) {
			if ( touchDown )
			{
				var ta = event.changedTouches;
				n = ta.length;
				while( n-- ) 
					if ( ta[n].identifier == touchID ) {
						touchX = ta[n].pageX;
						touchY = ta[n].pageY;
						draw();
						break;
					}
			}
			event.preventDefault();
		} 

		function onTouchEnd(event) { 
			if ( touchDown )
			{
				var ta = event.changedTouches;
				n = ta.length;
				while( n-- )
				{
					if ( ta[n].identifier == touchID )
					{
						touchDown = false;
					}
				}
			}
			event.preventDefault();
		}


	
		function onMouseDown( event ) {
			if ( !touchDown )
			{
				touchDown = true;
				ptouchX = touchX = event.pageX;
				ptouchY = touchY = event.pageY;
				document.addEventListener( 'mousemove', onMouseMove, false );
				document.addEventListener( 'mouseup', onMouseUp, false );
			}
		}

		function onMouseMove(event) {
			if ( touchDown )
			{
				touchX = event.pageX;
				touchY = event.pageY;
				draw();		
			}
		}

		function onMouseUp( event ) {
			if ( touchDown )
			{
				touchDown = false;
				document.removeEventListener( 'mousemove', onMouseMove );
				document.removeEventListener( 'mouseup', onMouseUp );
			}
		}
	*/